#!/bin/bash
# USAGE:
# goprof myapp.go --param1 val1 --param2 val2

# Receive params
gofile=$1;
p1=$2;
p2=$3;
p3=$4;
p4=$5;
p5=$6;

# Define paths for all temporary files
now=$(date +%Y%m%d_%H%M%S);
prefix="perftest_"$now"_"
perftestbin=$prefix${gofile%.go}"_bin";
pproffile=$prefix${gofile%.go}".pprof";
slowfuncsfile=$prefix"slowfuncs.log";
tmppprofpathfile=$prefix"tmppprofpath.txt"

# Make sure Dave Cheney's profile lib is installed
# (see http://dave.cheney.net/2013/07/07/introducing-profile-super-simple-profiling-for-go-programs)
if ! go list github.com/pkg/profile;
then
    go get -u github.com/pkg/profile
else
    echo "github.com/pkg/profile already installed!"
fi

# Inject the necessary calls to the profile library installed above
if grep -q "profile" $gofile;
then
    echo "Seems like profile code already exists in $gofile, so not modifying it.";
else
    lineno=$(($(grep -n "import (" $gofile | cut -f1 -d:) + 1));
    sed -i "${lineno}i \"github.com/pkg/profile\"" $gofile;
    lineno=$(($(grep -n "main()" $gofile | cut -f1 -d:) + 1));
    sed -i "${lineno}i defer profile.Start(profile.CPUProfile).Stop()" $gofile;
    gofmt -w $gofile;
fi;

# Build the go file with the instrumentation code inserted
go build -o $perftestbin $gofile;

# Run the instrumented binary, which will write a pprof file to /tmp/profile... somewhere.
# We grab the path reported and save it to a file
# (so we don't need to start a bash sub-shell, which does not work with profiling)
./$perftestbin $p1 $p2 $p3 $p4 $p5 2>&1 > ${perftestbin}_output.log | grep -oP "/tmp/profile[0-9]*/cpu.pprof" | head -n 1 > $tmppprofpathfile

# Get the temporary pprof file path into a variable and copy it to local folder
tmppproffile=$(cat $tmppprofpathfile);
echo "Found temporary pprof file in $tmppproffile";
cp $tmppproffile $pproffile;

# Generate the (cumulatively) slowest functions listing
go tool pprof --text --functions --cum $perftestbin $pproffile > $slowfuncsfile;
echo "Wrote the slowest (cumulative) functions to $slowfuncsfile ...";

# Open up the slowest functions file in less
less -S $slowfuncsfile
